rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if request is from admin (server-side only)
    function isAdminRequest() {
      // Admin operations are server-side only, not client operations
      // This is enforced by API auth, not client auth
      // Server requests from Vercel functions don't have client auth
      return request.auth == null;
    }
    
    // Additional security: validate admin operations have proper metadata
    function isValidAdminOperation() {
      // For admin_actions, ensure proper structure
      return request.resource.data.keys().hasAll(['type', 'timestamp', 'adminKey']);
    }
    
    // Players collection - allow reads and controlled writes
    match /players/{playerId} {
      // Public read for leaderboards
      allow read: if true;
      
      // Player creation - only during session creation
      allow create: if request.resource.data.keys().hasOnly([
        "playerId", "playerName", "isAnonymous", "createdAt", 
        "lastActive", "gamesPlayed", "wins", "losses", "draws",
        "currentLevel", "levelProgress", "totalScore", "achievements",
        "timeoutLosses"
      ]) && request.resource.data.playerId == playerId
        && request.resource.data.playerName is string
        && request.resource.data.playerName.size() > 0
        && request.resource.data.playerName.size() <= 50
        && request.resource.data.currentLevel >= 1
        && request.resource.data.currentLevel <= 5;
      
      // Regular player updates - only specific fields, only own data
      allow update: if request.auth != null 
        && resource.data.playerId == playerId
        && request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(["lastActive", "gamesPlayed", "wins", "losses", "draws", 
                   "currentLevel", "levelProgress", "totalScore", "achievements", "timeoutLosses"]);
      
      // Admin updates - allow all field changes (server-side only)
      allow update: if isAdminRequest()
        && request.resource.data.playerId == resource.data.playerId; // Prevent playerId changes
      
      // Admin deletion (server-side only)  
      allow delete: if isAdminRequest();
    }
    
    // Games collection - controlled access
    match /games/{gameId} {
      allow read: if request.auth != null 
        || resource.data.gameState == 'finished'; // Allow reading finished games
      
      allow create: if request.resource.data.keys().hasOnly([
        "players", "gameMode", "difficulty", "gridSize", "grid", 
        "currentPlayer", "gameState", "winner", "moveCount", 
        "startedAt", "finishedAt", "createdAt", "lastUpdate"
      ]) && request.resource.data.gameState in ['waiting', 'active']
        && request.resource.data.gridSize >= 3
        && request.resource.data.gridSize <= 10
        && request.resource.data.grid.size() == (request.resource.data.gridSize * request.resource.data.gridSize);
      
      allow update: if request.auth != null
        && request.resource.data.lastUpdate > resource.data.lastUpdate
        && request.resource.data.moveCount >= resource.data.moveCount;
    }
    
    // Game moves collection for move validation
    match /gameMoves/{moveId} {
      allow create: if request.resource.data.keys().hasOnly([
        "gameId", "playerId", "player", "position", "timestamp"
      ]) && request.resource.data.timestamp >= request.time - duration.value(30, 's')
        && request.resource.data.position >= 0
        && request.resource.data.player in ['X', 'O'];
      
      allow read: if request.auth != null;
    }
    
    // Leaderboard scores - controlled writes
    match /scores/{scoreId} {
      allow read: if true; // Public leaderboard
      allow create: if request.resource.data.keys().hasOnly([
        "playerId", "playerName", "score", "gameMode", "difficulty", 
        "timestamp", "movesCount", "timeElapsed", "gameId", "level"
      ]) && request.resource.data.score is number
        && request.resource.data.score >= 0
        && request.resource.data.score <= 1000000  // Realistic score ceiling
        && request.resource.data.playerName is string
        && request.resource.data.playerName.size() > 0
        && request.resource.data.playerName.size() <= 50
        && request.resource.data.level >= 1
        && request.resource.data.level <= 5;
    }
    
    // Admin actions collection - admin operations logging
    match /admin_actions/{actionId} {
      // Only server-side admin operations can write
      allow create: if isAdminRequest()
        && isValidAdminOperation()
        && request.resource.data.keys().hasOnly([
          "type", "userId", "adminKey", "timestamp", "ip",
          "oldLevel", "newLevel", "pointsAdjusted", "reason", "oldScore"
        ]) && request.resource.data.type in [
          "level_change", "user_deletion", "points_adjustment"
        ] && request.resource.data.timestamp is string
        && request.resource.data.adminKey is string
        && request.resource.data.adminKey.size() > 0;
      
      // Only admins can read admin logs (server-side only)
      allow read: if isAdminRequest();
    }
    
    // Deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}